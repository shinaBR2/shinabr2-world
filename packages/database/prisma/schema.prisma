generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  auth0_id    String        @unique
  username    String?       @unique
  video_views video_views[]
  videos      videos[]
}

model video_views {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  video_id  String    @db.Uuid
  user_id   String    @db.Uuid
  viewed_at DateTime? @default(now()) @db.Timestamptz(6)
  users     users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  videos    videos    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "index_video_views_on_user_id")
  @@index([video_id], map: "index_video_views_on_video_id")
}

model videos {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  video_url     String
  thumbnail_url String?
  user_id       String        @db.Uuid
  view_count    Int?          @default(0)
  status        String?       @default("processing")
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?     @default(now()) @db.Timestamptz(6)
  slug          String        @unique(map: "videos_slug_unique") @db.VarChar(255)
  source        String?
  public        Boolean       @default(false)
  video_views   video_views[]
  users         users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "index_videos_on_created_at")
  @@index([user_id], map: "index_videos_on_user_id")
  @@index([slug])
}
